Le dossier ./java/eu/telecomnancy/labfx/ contient les fichiers suivants:

DataBase.java
EquipmentController.java
EquipmentOffer.java
InscriptionController.java
MainController.java
Main.java
ServiceController.java
ServiceOffer.java
SkeletonController.java
User.java


Le contenu des fichiers est le suivant:

package eu.telecomnancy.labfx;

import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class DataBase {

    private static final String DB_FOLDER = "BD";
    private static final String DB_NAME = "DirectDealing.db";
    private static final String DB_URL = "jdbc:sqlite:" + DB_FOLDER + File.separator + DB_NAME;

    // Méthode pour obtenir une connexion à la base de données
    public static Connection getConnection() throws SQLException {
        File dbFolder = new File(DB_FOLDER);
        if (!dbFolder.exists()) {
            dbFolder.mkdir();
        }
        return DriverManager.getConnection(DB_URL);
    }

    // Méthode pour initialiser la base de données
    public static void initializeDatabase() {
        try (Connection conn = getConnection(); Statement stmt = conn.createStatement()) {
            // Vérifiez si la table "profil" existe et créez-la si nécessaire
            String sql = "CREATE TABLE IF NOT EXISTS profil (" +
                         "id INTEGER PRIMARY KEY, " +
                         "prenom TEXT NOT NULL, " +
                         "nom TEXT NOT NULL, " +
                         "pseudo TEXT UNIQUE NOT NULL, " +
                         "mail TEXT UNIQUE NOT NULL, " +
                         "phone TEXT, " +
                         "password TEXT NOT NULL, " +
                         "photo_profil TEXT, " +
                         "localisation TEXT NOT NULL, " +
                         "date_inscription TEXT, " +
                         "status_compte TEXT CHECK(status_compte IN ('particulier', 'professionnel')), " +
                         "etat_compte TEXT CHECK(etat_compte IN ('sommeil', 'actif')), " +
                         "nb_florain INTEGER, " +
                         "historique_florain TEXT, " +
                         "note REAL)";
            stmt.execute(sql);
        } catch (SQLException e) {
            e.printStackTrace();
            // Gérer l'exception
        }
    }
}
package eu.telecomnancy.labfx;

import javafx.fxml.FXML;

public class EquipmentController {
    @FXML public void handleCreateOffer() {
        System.out.println("Create offer");
    }

    @FXML public void handleConsultOffer() {
        System.out.println("Consult offer");
    }
}
package eu.telecomnancy.labfx;

import java.time.LocalDate;

// Description: Classe représentant une offre de matériel. Elle contient un nom, une description, une quantité, 
//              une date de début et de fin de disponibilité et un prix.
public class EquipmentOffer {
    private User owner;
    private String name;
    private String description;
    private int quantity;
    private LocalDate start_availability;
    private LocalDate end_availability;
    private int price;

    public EquipmentOffer(User owner, String name, String description, int quantity, LocalDate start_availability, LocalDate end_availability, int price) {
        this.owner = owner;
        this.name = name;
        this.description = description;
        this.quantity = quantity;
        this.start_availability = start_availability;
        this.end_availability = end_availability;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }

    public LocalDate getStartAvailability(){
        return start_availability;
    }

    public String getStartAvailabilityStr(){
        return start_availability.toString();
    }

    public void setStartAvailability(LocalDate begin){
        this.start_availability = begin;
    }

    public LocalDate getEndAvaibility(){
        return end_availability;
    }

    public String getEndAvailabilityStr(){
        return end_availability.toString();
    }

    public void setEndAvailability(LocalDate end){
        this.end_availability = end;
    }

    public int getPrice(){
        return price;
    }

    public void setPrice(int price){
        this.price = price;
    }
}
package eu.telecomnancy.labfx;

import javafx.fxml.FXML;
/* import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene; */
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.FileChooser;
//import javafx.stage.Stage;


import java.io.File;
import java.io.IOException;
import java.sql.Connection;
//import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;



//import javafx.application.Platform;

public class InscriptionController {

    private MainController mainController;

    @FXML private TextField prenom;
    @FXML private TextField nom;
    @FXML private TextField pseudo;
    @FXML private TextField mail;
    @FXML private TextField password;
    @FXML private TextField password2;
    @FXML private TextField localisation;
    @FXML private TextField telephone;
    @FXML private ImageView imageView;

    private String imagePath;

    public void setMainController(MainController mainController) {
        this.mainController = mainController;
    }

    @FXML
    public void handleInscription() throws IOException {
        String prenomValue = prenom.getText();
        String nomValue = nom.getText();
        String pseudoValue = pseudo.getText();
        String mailValue = mail.getText();
        String passwordValue = password.getText();
        String password2Value = password2.getText();
        String localisationValue = localisation.getText();
        String phoneValue = telephone.getText();
    
        // Vérifiez si les champs obligatoires sont remplis
        if (prenomValue.isEmpty() || nomValue.isEmpty() || pseudoValue.isEmpty() || 
            mailValue.isEmpty() || passwordValue.isEmpty() || localisationValue.isEmpty()) {
            System.out.println("Tous les champs obligatoires doivent être remplis");
            return;
        }
    
        if (!passwordValue.equals(password2Value)) {
            System.out.println("Les mots de passe ne correspondent pas");
            return;
        }
        
        try (Connection conn = DataBase.getConnection()) {
            if (userExists(conn, pseudoValue, mailValue)) {
                System.out.println("Un utilisateur avec ce pseudo ou ce mail existe déjà");
                return;
            }
    
            String sql = "INSERT INTO profil (prenom, nom, pseudo, mail, password, phone, localisation, date_inscription, nb_florain, photo_profil) VALUES (?, ?, ?, ?, ?, ?, ?, ?, 100, ?)";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                pstmt.setString(1, prenomValue);
                pstmt.setString(2, nomValue);
                pstmt.setString(3, pseudoValue);
                pstmt.setString(4, mailValue);
                pstmt.setString(5, passwordValue);
                pstmt.setString(6, phoneValue.isEmpty() ? null : phoneValue); // Téléphone non obligatoire
                pstmt.setString(7, localisationValue);
                pstmt.setString(8, LocalDate.now().toString());
                pstmt.setString(9, imagePath); // Photo de profil non obligatoire
    
                pstmt.executeUpdate();
                System.out.println("Utilisateur créé");
                // Reste du code pour la redirection
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Gestion des erreurs SQL
        }
    
    
        // Redirection vers WelcomePage.fxml
        mainController.loadWelcomePage();
    }
    
    

    @FXML
    private void chooseImage() {
        FileChooser fileChooser = new FileChooser();
        fileChooser.setTitle("Choisir une Image");
        fileChooser.getExtensionFilters().addAll(
            new FileChooser.ExtensionFilter("Images", "*.png", "*.jpg", "*.jpeg")
        );
    
        File selectedFile = fileChooser.showOpenDialog(null);
        if (selectedFile != null) {
            Image image = new Image(selectedFile.toURI().toString());
            imageView.setImage(image);
    
            // Stocker le chemin d'accès de l'image
            imagePath = selectedFile.getAbsolutePath();
        }
    }


    private boolean userExists(Connection conn, String pseudo, String mail) throws SQLException {
    String sql = "SELECT * FROM profil WHERE pseudo = ? OR mail = ?";
    try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
        pstmt.setString(1, pseudo);
        pstmt.setString(2, mail);
        ResultSet rs = pstmt.executeQuery();
        return rs.next(); // Retourne vrai si un enregistrement existe
        }
    }


    // Bouton qui charge la page de bienvenue
    @FXML
    public void handleRetour() throws IOException {
        mainController.loadWelcomePage();
    }

}




package eu.telecomnancy.labfx;

import java.io.IOException;
import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

public class Main extends Application {

    private static Stage primaryStage;

    public static Stage getPrimaryStage() {
        return primaryStage;
    }

    public static void setPrimaryStage(Stage stage) {
        primaryStage = stage;
    }

    public static void main(String[] args) {
        DataBase.initializeDatabase();
        Application.launch(args);

    }

    @Override
    public void start(Stage primaryStage) throws IOException {
        setPrimaryStage(primaryStage);
        primaryStage.setTitle("DirectDealing");
        FXMLLoader loader = new FXMLLoader(getClass().getResource("/eu/telecomnancy/labfx/WelcomePage.fxml"));
        Parent root = loader.load();
        
        Scene scene = new Scene(root, 1600, 900);
        primaryStage.setScene(scene);
        primaryStage.setResizable(true);
        primaryStage.show();
    }
}
package eu.telecomnancy.labfx;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.TextField;
import javafx.stage.Stage;
import eu.telecomnancy.labfx.DataBase;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.io.IOException;

public class MainController {

    @FXML private TextField emailField;
    @FXML private TextField passwordField;

    // Fonction qui permet de charger la page de bienvenue
    public void loadWelcomePage() {
        System.out.println("Chargement de la page de bienvenue");
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/eu/telecomnancy/labfx/WelcomePage.fxml"));
            Parent welcomePage = loader.load();

            // Ajouter le WelcomePage à la scène
            Main.getPrimaryStage().getScene().setRoot(welcomePage);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    // Fonction qui permet de charger la page d'inscription
    public void loadInscriptionPage() {
        try {
            System.out.println("Chargement de la page d'inscription");
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/eu/telecomnancy/labfx/InscriptionPage.fxml"));
            Parent inscription = loader.load();

            InscriptionController inscriptionController = loader.getController();
            inscriptionController.setMainController(this);

            // Ajouter la page d'inscription à la scène
            Main.getPrimaryStage().getScene().setRoot(inscription);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    // Fonction qui charge le squellete de la page d'accueil
    public void loadSkeletPage() {
        //A compléter
    }

    public void loadHomePage() {
        //A compléter
    }


    // Bouton qui charge la page d'incription
    @FXML
    public void handleInscription() throws IOException {
        loadInscriptionPage();
    }

    // Bouton qui charge la page de bienvenue
    @FXML
    public void handleWelcome() throws IOException {
        loadWelcomePage();
    }

    // Bouton qui tente la connexion
    @FXML
    private void handleConnexion() {
    String email = emailField.getText();
    String password = passwordField.getText();

    try (Connection conn = DataBase.getConnection()) {
        String sql = "SELECT * FROM profil WHERE mail = ? AND password = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, email);
            pstmt.setString(2, password);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                // Utilisateur trouvé, rediriger vers Dashboard.fxml
                System.out.println("Utilisateur trouvé, Connexion réussie");
                // Charger la page d'accueil
                loadHomePage();
                // Creation d'un objet User
                User user = new User(email);

                System.out.println("Prenom: " + user.getPrenom() + " Nom: " + user.getNom() + " Pseudo: " + user.getPseudo() + " Mail: " + user.getMail() + " Phone: " + user.getPhone() + " Photo de profil: " + user.getPhotoProfil() + " Localisation: " + user.getLocalisation() + " Date d'inscription: " + user.getDateInscription() + " Status du compte: " + user.getStatusCompte() + " Etat du compte: " + user.getEtatCompte() + " Nombre de florain: " + user.getNbFlorain() + " Historique florain: " + user.getHistoriqueFlorain() + " Note: " + user.getNote());
            } else {
                System.out.println("Identifiants incorrects");
                // Afficher un message d'erreur
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        // Gestion des erreurs SQL
        }
    }
}
package eu.telecomnancy.labfx;

import javafx.fxml.FXML;

public class ServiceController {
    @FXML public void handleCreateOffer() {
        System.out.println("Create offer");
    }

    @FXML public void handleConsultOffer() {
        System.out.println("Consult offer");
    }
}
package eu.telecomnancy.labfx;

import java.time.LocalDate;
import java.time.LocalTime;

// Description: Classe représentant une offre de service. Elle contient un titre, une description, une date et une heure.
//              Elle peut être récurrente, auquel cas on lui ajoute un tableau de jours de la semaine où le service doit être réalisé.
public class ServiceOffer {
    private User supplier;
    private String title;
    private String description;
    private LocalDate date;
    private LocalTime time;
    private boolean is_recurrent;
    private int[] days_of_service; // ici on ajoutera les jours où le service doit être réalisés lors d'une récurrence.
                                   // On notera 1 = lundi, 2 = mardi, etc.
    private int nb_recurrencing_weeks;

    public ServiceOffer(User supplier, String title, String description, LocalDate date, LocalTime time){
        this.supplier = supplier;
        this.title = title;
        this.description = description;
        this.date = date;
        this.time = time;
        this.is_recurrent = false;
    }

    public ServiceOffer(User supplier, String title, String description, LocalDate date, LocalTime time, int[] days_of_service, int nb_recurrencing_weeks){
        this.supplier = supplier;
        this.title = title;
        this.description = description;
        this.date = date;
        this.time = time;
        this.is_recurrent = true;
        this.days_of_service = days_of_service;
        this.nb_recurrencing_weeks = nb_recurrencing_weeks;
    }

    public String getTitle(){
        return title;
    }

    public void setTitle(String title){
        this.title = title;
    }

    public String getDescription(){
        return description;
    }

    public void setDescription(String description){
        this.description = description;
    }

    public LocalDate getDate(){
        return date;
    }

    public String getDateStr(){
        return date.toString();
    }

    public void setDate(LocalDate date){
        this.date = date;
    }

    public LocalTime getTime(){
        return time;
    }

    public String getTimeStr(){
        return time.toString();
    }

    public void setTime(LocalTime time){
        this.time = time;
    }

    public boolean getIsRecurrent(){
        return is_recurrent;
    }

    public int[] getDaysOfService() {
        return this.days_of_service;
    }

    public void setDaysOfService(int[] days_of_service) {
        this.days_of_service = days_of_service;
    }

    public int getNbRecurrencingWeeks() {
        return this.nb_recurrencing_weeks;
    }

    public void setNbRecurrencingWeeks(int nb_recurrencing_weeks) {
        this.nb_recurrencing_weeks = nb_recurrencing_weeks;
    }
}
package eu.telecomnancy.labfx;

public class SkeletonController {
    
}
package eu.telecomnancy.labfx;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDate;


public class User {

    private int id;
    private String prenom;
    private String nom;
    private String pseudo;
    private String mail;
    private String phone;
    private String photoProfil;
    private String localisation;
    private LocalDate dateInscription;
    private String statusCompte;
    private String etatCompte;
    private int nbFlorain;
    private String historiqueFlorain;
    private Double note;

    public User(String mail) {
        this.mail = mail;
        loadUserFromDB();
    }

    private void loadUserFromDB() {
        String sql = "SELECT * FROM profil WHERE mail = ?";

        try (Connection conn = DataBase.getConnection(); // Utiliser DatabaseUtil pour obtenir la connexion
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, this.mail);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                this.id = rs.getInt("id");
                this.prenom = rs.getString("prenom");
                this.nom = rs.getString("nom");
                this.pseudo = rs.getString("pseudo");
                this.phone = rs.getString("phone");
                this.photoProfil = rs.getString("photo_profil");
                this.localisation = rs.getString("localisation");
                String dateString = rs.getString("date_inscription");
                if (dateString != null && !dateString.isEmpty()) {
                this.dateInscription = LocalDate.parse(dateString);
                } else {
                this.dateInscription = null; // ou une date par défaut si nécessaire
                }
                this.statusCompte = rs.getString("status_compte");
                this.etatCompte = rs.getString("etat_compte");
                this.nbFlorain = rs.getInt("nb_florain");
                this.historiqueFlorain = rs.getString("historique_florain");
                this.note = rs.getDouble("note");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    

    public void update() {
        String sql = "UPDATE profil SET prenom = ?, nom = ?, pseudo = ?, phone = ?, photo_profil = ?, localisation = ?, status_compte = ?, etat_compte = ?, nb_florain = ?, historique_florain = ?, note = ? WHERE mail = ?";

        try (Connection conn = DataBase.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, this.prenom);
            pstmt.setString(2, this.nom);
            pstmt.setString(3, this.pseudo);
            pstmt.setString(4, this.phone);
            pstmt.setString(5, this.photoProfil);
            pstmt.setString(6, this.localisation);
            pstmt.setString(7, this.statusCompte);
            pstmt.setString(8, this.etatCompte);
            pstmt.setInt(9, this.nbFlorain);
            pstmt.setString(10, this.historiqueFlorain);
            pstmt.setDouble(11, this.note);
            pstmt.setString(12, this.mail);

            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }


    // Getters et Setters
    
    public String getPrenom() {
        return prenom;
    }
    
    public void setPrenom(String prenom) {
        this.prenom = prenom;
    }
    
    public String getNom() {
        return nom;
    }
    
    public void setNom(String nom) {
        this.nom = nom;
    }

    public String getMail() {
        return mail;
    }

    public String setMail() {
        return this.mail;
    }
    
    public String getPseudo() {
        return pseudo;
    }
    
    public void setPseudo(String pseudo) {
        this.pseudo = pseudo;
    }
    
    public String getPhone() {
        return phone;
    }
    
    public void setPhone(String phone) {
        this.phone = phone;
    }
    
    public String getPhotoProfil() {
        return photoProfil;
    }
    
    public void setPhotoProfil(String photoProfil) {
        this.photoProfil = photoProfil;
    }
    
    public String getLocalisation() {
        return localisation;
    }
    
    public void setLocalisation(String localisation) {
        this.localisation = localisation;
    }
    
    public LocalDate getDateInscription() {
        return dateInscription;
    }
    
    public void setDateInscription(LocalDate dateInscription) {
        this.dateInscription = dateInscription;
    }
    
    public String getStatusCompte() {
        return statusCompte;
    }
    
    public void setStatusCompte(String statusCompte) {
        this.statusCompte = statusCompte;
    }
    
    public String getEtatCompte() {
        return etatCompte;
    }
    
    public void setEtatCompte(String etatCompte) {
        this.etatCompte = etatCompte;
    }
    
    public int getNbFlorain() {
        return nbFlorain;
    }
    
    public void setNbFlorain(int nbFlorain) {
        this.nbFlorain = nbFlorain;
    }
    
    public String getHistoriqueFlorain() {
        return historiqueFlorain;
    }
    
    public void setHistoriqueFlorain(String historiqueFlorain) {
        this.historiqueFlorain = historiqueFlorain;
    }
    
    public Double getNote() {
        return note;
    }
    
    public void setNote(Double note) {
        this.note = note;
    }
    
    

    
}
Le dossier ./resources/eu/telecomnancy/labfx/ contient les fichiers suivants:

Equipment.fxml
HomePage.fxml
images
InscriptionPage.fxml
Service.fxml
SkeletonPage.fxml
WelcomePage.fxml


Le contenu des fichiers est le suivant:

<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.layout.AnchorPane?>


<AnchorPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="eu.telecomnancy.labfx.EquipmentController">
   <children>
      <Button fx:id="ButtonCreate" layoutX="81.0" layoutY="71.0" mnemonicParsing="false" onAction="#handleCreateOffer" text="Créer une offre" />
      <Button fx:id="ButtonConsult" layoutX="342.0" layoutY="71.0" mnemonicParsing="false" onAction="#handleConsultOffer" text="Consulter la liste des offres" />
   </children>
</AnchorPane>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.SplitPane?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.shape.Line?>

<SplitPane dividerPositions="0.29797979797979796" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns:fx="http://javafx.com/fxml/1" xmlns="http://javafx.com/javafx/21">
  <items>
    <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="398.0" prefWidth="291.0">
         <children>
            <VBox prefHeight="398.0" prefWidth="140.0">
               <children>
                  <VBox fx:id="MenuContent" prefHeight="272.0" prefWidth="110.0" />
                  <Line endX="75.29289245605469" startX="-100.0" />
                  <VBox fx:id="ProfileContent" prefHeight="125.0" prefWidth="175.0" />
               </children>
            </VBox>
         </children></AnchorPane>
    <AnchorPane fx:id="mainContent" minHeight="0.0" minWidth="0.0" prefHeight="398.0" prefWidth="257.0" />
  </items>
</SplitPane>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.VBox?>

<BorderPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="440.0" prefWidth="717.0" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="eu.telecomnancy.labfx.InscriptionController">
   <center>
      <VBox alignment="CENTER" prefHeight="200.0" prefWidth="100.0" BorderPane.alignment="CENTER">
         <children>
            <VBox alignment="CENTER" prefHeight="200.0" prefWidth="100.0" spacing="10.0">
                <Button fx:id="ButtonValidate" layoutX="53.0" layoutY="305.0" mnemonicParsing="false" onAction="#handleInscription" text="VALIDER" />
                <Button fx:id="ButtonCancel" layoutX="470.0" layoutY="305.0" mnemonicParsing="false" onAction="#handleRetour" text="ANNULER" />
                <TextField fx:id="prenom" alignment="CENTER" layoutX="269.0" layoutY="44.0" promptText="Entrez un Prénom" />
                <TextField fx:id="nom" alignment="CENTER" layoutX="63.0" layoutY="108.0" promptText="Entrez un Nom" />
                    <TextField fx:id="pseudo" alignment="CENTER" layoutX="80.0" layoutY="44.0" promptText="Entrez un Pseudo" />
                     <TextField fx:id="localisation" alignment="CENTER" layoutX="80.0" layoutY="44.0" promptText="Entrez une ville" />
                     <TextField fx:id="telephone" alignment="CENTER" layoutX="80.0" layoutY="44.0" promptText="Numéro de téléphone" />
                    <TextField fx:id="mail" alignment="CENTER" layoutX="397.0" layoutY="82.0" promptText="Entrez un mail" />
                    <TextField fx:id="password" alignment="CENTER" layoutX="349.0" layoutY="134.0" promptText="Entrez un mot de passe" />
                    <TextField fx:id="password2" alignment="CENTER" layoutX="160.0" layoutY="181.0" promptText="Confirmez votre mot de passe" />
                <Button fx:id="ButtonImage" layoutX="243.0" layoutY="228.0" mnemonicParsing="false" onAction="#chooseImage" text="Choisir une image" />
               <ImageView fx:id="imageView" fitHeight="85.0" fitWidth="115.0" layoutX="223.0" layoutY="221.0" pickOnBounds="true" preserveRatio="true" />
            </VBox>
         </children>
      </VBox>
   </center>
   <top>
      <ImageView fitHeight="150.0" fitWidth="358.0" pickOnBounds="true" preserveRatio="true" BorderPane.alignment="CENTER">
         <image>
            <Image url="@images/logo_codingWeek.png" />
         </image>
      </ImageView>
   </top>
</BorderPane><?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.layout.AnchorPane?>


<AnchorPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="eu.telecomnancy.labfx.ServiceController">
   <children>
      <Button fx:id="ButtonCreate" layoutX="49.0" layoutY="61.0" mnemonicParsing="false" onAction="#handleCreateOffer" text="Créer une offre pour un service" />
      <Button fx:id="ButtonConsult" layoutX="300.0" layoutY="61.0" mnemonicParsing="false" onAction="#handleConsultOffer" text="Consulter la liste des offres disponibles" />
   </children>
</AnchorPane>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.shape.Line?>

<AnchorPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="eu.telecomnancy.labfx.SkeletonController">
   <children>
      <AnchorPane layoutY="1.0" minHeight="0.0" minWidth="0.0" prefHeight="398.0" prefWidth="177.0">
         <children>
            <VBox prefHeight="398.0" prefWidth="160.0">
               <children>
                  <VBox fx:id="MenuContent" prefHeight="300.0" prefWidth="177.0" />
                  <VBox fx:id="ProfileContent" prefHeight="130.0" prefWidth="177.0">
                     <children>
                        <Line endX="75.29289245605469" startX="-100.0" />
                     </children>
                  </VBox>
               </children>
            </VBox>
         </children>
      </AnchorPane>
      <Line endX="176.0" startX="176.0" startY="398.9999694824219" />
      <AnchorPane fx:id="mainContent" layoutX="175.0" layoutY="1.0" prefHeight="398.0" prefWidth="418.0" />
   </children>
</AnchorPane>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.image.Image?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.BorderPane?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>

<BorderPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="440.0" prefWidth="717.0" xmlns="http://javafx.com/javafx/21" xmlns:fx="http://javafx.com/fxml/1" fx:controller="eu.telecomnancy.labfx.MainController">
   <center>
      <VBox alignment="CENTER" prefHeight="200.0" prefWidth="100.0" BorderPane.alignment="CENTER">
         <children>
            <VBox alignment="TOP_CENTER" prefHeight="200.0" prefWidth="100.0">
               <children>
                  <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Bienvenue sur">
                     <font>
                        <Font size="24.0" />
                     </font>
                     <VBox.margin>
                        <Insets bottom="10.0" left="10.0" right="10.0" top="10.0" />
                     </VBox.margin></Text>
                  <ImageView fitHeight="150.0" fitWidth="358.0" pickOnBounds="true" preserveRatio="true">
                     <image>
                        <Image url="@images/logo_codingWeek.png" />
                     </image></ImageView>
               </children>
               <padding>
                  <Insets bottom="10.0" left="10.0" right="10.0" top="10.0" />
               </padding>
            </VBox>
            <VBox alignment="CENTER" prefHeight="200.0" prefWidth="100.0" spacing="10.0">
               <children>
                  <VBox alignment="CENTER" prefHeight="132.0" prefWidth="548.0" spacing="10.0">
                     <children>
                        <TextField fx:id="emailField" prefHeight="24.0" prefWidth="330.0" promptText="Email">
                           <VBox.margin>
                              <Insets left="50.0" right="50.0" />
                           </VBox.margin></TextField>
                        <TextField fx:id="passwordField" promptText="Mot de passe">
                           <VBox.margin>
                              <Insets left="50.0" right="50.0" />
                           </VBox.margin></TextField>
                     </children>
                     <VBox.margin>
                        <Insets bottom="10.0" left="80.0" right="80.0" top="10.0" />
                     </VBox.margin>
                  </VBox>
                  <Button fx:id="ConnexionButton" mnemonicParsing="false" onAction="#handleConnexion" text="Connexion">
                     <VBox.margin>
                        <Insets />
                     </VBox.margin>
                  </Button>
               </children>
               <padding>
                  <Insets bottom="10.0" left="10.0" right="10.0" top="10.0" />
               </padding>
            </VBox>
            <HBox alignment="BOTTOM_CENTER" prefHeight="100.0" prefWidth="200.0" spacing="10.0">
               <children>
                  <Text strokeType="OUTSIDE" strokeWidth="0.0" text="Pas encore inscrit?" />
                  <Button mnemonicParsing="false" onAction="#handleInscription" text="Inscrivez-vous" />
               </children>
               <padding>
                  <Insets bottom="20.0" left="10.0" right="10.0" top="10.0" />
               </padding>
            </HBox>
         </children>
      </VBox>
   </center>
</BorderPane>
